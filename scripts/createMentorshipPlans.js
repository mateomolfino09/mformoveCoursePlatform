const axios = require('axios');

// Configuraci√≥n
const API_BASE_URL = 'http://localhost:3000/api/payments';

// Planes de mentor√≠a de ejemplo
const mentorshipPlans = [
  {
    name: "Mentor√≠a Explorer",
    description: "Ideal para principiantes que quieren comenzar su viaje en el movimiento consciente. Sesiones personalizadas para establecer bases s√≥lidas.",
    price: 99,
    currency: "USD",
    interval: "trimestral",
    level: "explorer",
    features: [
      "Sesi√≥n inicial de evaluaci√≥n personal",
      "Plan de entrenamiento personalizado",
      "2 sesiones de mentor√≠a por mes",
      "Acceso a recursos exclusivos",
      "Seguimiento semanal por email",
      "Comunidad privada de exploradores"
    ],
    stripePriceId: "price_explorer_quarterly",
    active: true,
    planType: "mentorship",
    useStripe: true,
    amount: 99,
    amountAnual: 99
  },
  {
    name: "Mentor√≠a Practitioner",
    description: "Para practicantes intermedios que buscan profundizar en t√©cnicas avanzadas y optimizar su rendimiento.",
    price: 149,
    currency: "USD",
    interval: "trimestral",
    level: "practitioner",
    features: [
      "Evaluaci√≥n avanzada de movimientos",
      "3 sesiones de mentor√≠a por mes",
      "An√°lisis de video personalizado",
      "Programa de progresi√≥n avanzado",
      "Acceso a workshops exclusivos",
      "Soporte prioritario",
      "Comunidad de practicantes"
    ],
    stripePriceId: "price_practitioner_quarterly",
    active: true,
    planType: "mentorship",
    useStripe: true,
    amount: 149,
    amountAnual: 149
  },
  {
    name: "Mentor√≠a Student",
    description: "Programa intensivo para estudiantes avanzados que buscan convertirse en instructores o alcanzar el siguiente nivel.",
    price: 199,
    currency: "USD",
    interval: "trimestral",
    level: "student",
    features: [
      "Mentor√≠a 1-on-1 intensiva",
      "4 sesiones de mentor√≠a por mes",
      "Certificaci√≥n de instructor",
      "Acceso completo a todos los recursos",
      "Participaci√≥n en eventos exclusivos",
      "Soporte 24/7",
      "Comunidad VIP de estudiantes"
    ],
    stripePriceId: "price_student_quarterly",
    active: true,
    planType: "mentorship",
    useStripe: true,
    amount: 199,
    amountAnual: 199
  },
  {
    name: "Mentor√≠a Explorer Anual",
    description: "Plan anual con descuento para exploradores comprometidos con su desarrollo a largo plazo.",
    price: 349,
    currency: "USD",
    interval: "anual",
    level: "explorer",
    features: [
      "Sesi√≥n inicial de evaluaci√≥n personal",
      "Plan de entrenamiento personalizado",
      "2 sesiones de mentor√≠a por mes",
      "Acceso a recursos exclusivos",
      "Seguimiento semanal por email",
      "Comunidad privada de exploradores",
      "Descuento del 30% vs plan trimestral"
    ],
    stripePriceId: "price_explorer_yearly",
    active: true,
    planType: "mentorship",
    useStripe: true,
    amount: 349,
    amountAnual: 349
  },
  {
    name: "Mentor√≠a Practitioner Anual",
    description: "Plan anual premium para practicantes que buscan un compromiso a largo plazo con su desarrollo.",
    price: 499,
    currency: "USD",
    interval: "anual",
    level: "practitioner",
    features: [
      "Evaluaci√≥n avanzada de movimientos",
      "3 sesiones de mentor√≠a por mes",
      "An√°lisis de video personalizado",
      "Programa de progresi√≥n avanzado",
      "Acceso a workshops exclusivos",
      "Soporte prioritario",
      "Comunidad de practicantes",
      "Descuento del 25% vs plan trimestral"
    ],
    stripePriceId: "price_practitioner_yearly",
    active: true,
    planType: "mentorship",
    useStripe: true,
    amount: 499,
    amountAnual: 499
  }
];

// Funci√≥n para crear un plan
async function createPlan(planData) {
  try {
    console.log(`üîÑ Creando plan: ${planData.name}...`);
    
    const response = await axios.post(`${API_BASE_URL}/createPlan`, planData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.data.success) {
      console.log(`‚úÖ Plan creado exitosamente: ${planData.name}`);
      console.log(`   üí∞ Precio: $${planData.price} ${planData.currency}`);
      console.log(`   üìÖ Intervalo: ${planData.interval}`);
      console.log(`   üéØ Nivel: ${planData.level}`);
      console.log(`   üîó Stripe ID: ${planData.stripePriceId}`);
      console.log('---');
    } else {
      console.log(`‚ùå Error al crear plan: ${planData.name}`);
      console.log(`   Error: ${response.data.message}`);
    }
  } catch (error) {
    console.log(`‚ùå Error al crear plan: ${planData.name}`);
    if (error.response) {
      console.log(`   Status: ${error.response.status}`);
      console.log(`   Error: ${error.response.data.error || error.response.data.message}`);
    } else {
      console.log(`   Error: ${error.message}`);
    }
    console.log('---');
  }
}

// Funci√≥n principal
async function createAllPlans() {
  console.log('üöÄ Iniciando creaci√≥n de planes de mentor√≠a...');
  console.log('üìä Total de planes a crear:', mentorshipPlans.length);
  console.log('---');

  for (const plan of mentorshipPlans) {
    await createPlan(plan);
    // Peque√±a pausa entre requests
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  console.log('üéâ Proceso completado!');
  console.log('üìã Verificar planes en: http://localhost:3000/admin/mentorship/plans');
}

// Funci√≥n para verificar planes existentes
async function checkExistingPlans() {
  try {
    console.log('üîç Verificando planes existentes...');
    
    const response = await axios.get(`${API_BASE_URL}/getPlans?type=mentorship`);
    
    if (response.data && response.data.length > 0) {
      console.log(`üìä Se encontraron ${response.data.length} planes existentes:`);
      response.data.forEach(plan => {
        console.log(`   - ${plan.name} (${plan.level}) - $${plan.price}`);
      });
      console.log('---');
      
      const shouldContinue = process.argv.includes('--force');
      if (!shouldContinue) {
        console.log('‚ö†Ô∏è  Ya existen planes de mentor√≠a.');
        console.log('   Para forzar la creaci√≥n, ejecuta: node scripts/createMentorshipPlans.js --force');
        return false;
      }
    } else {
      console.log('‚úÖ No se encontraron planes existentes.');
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Error al verificar planes existentes:', error.message);
    return true; // Continuar si hay error en la verificaci√≥n
  }
}

// Funci√≥n para mostrar informaci√≥n del script
function showHelp() {
  console.log('üìñ Script de Creaci√≥n de Planes de Mentor√≠a');
  console.log('==========================================');
  console.log('');
  console.log('Uso:');
  console.log('  node scripts/createMentorshipPlans.js        # Crear planes (con verificaci√≥n)');
  console.log('  node scripts/createMentorshipPlans.js --force # Forzar creaci√≥n');
  console.log('  node scripts/createMentorshipPlans.js --help  # Mostrar esta ayuda');
  console.log('');
  console.log('Requisitos:');
  console.log('  - Servidor corriendo en http://localhost:3000');
  console.log('  - Base de datos MongoDB conectada');
  console.log('  - Modelo MentorshipPlan configurado');
  console.log('');
  console.log('Planes que se crear√°n:');
  mentorshipPlans.forEach((plan, index) => {
    console.log(`  ${index + 1}. ${plan.name} - $${plan.price} (${plan.interval})`);
  });
}

// Ejecutar script
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help')) {
    showHelp();
    return;
  }

  try {
    const shouldContinue = await checkExistingPlans();
    if (shouldContinue) {
      await createAllPlans();
    }
  } catch (error) {
    console.log('‚ùå Error general:', error.message);
    console.log('');
    console.log('üí° Aseg√∫rate de que:');
    console.log('   1. El servidor est√© corriendo en http://localhost:3000');
    console.log('   2. La base de datos est√© conectada');
    console.log('   3. El modelo MentorshipPlan est√© configurado');
  }
}

// Ejecutar si es el archivo principal
if (require.main === module) {
  main();
}

module.exports = { createAllPlans, mentorshipPlans }; 