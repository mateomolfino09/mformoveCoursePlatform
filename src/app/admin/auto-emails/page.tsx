'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { ArrowLeftIcon, CheckIcon, XMarkIcon, EyeIcon, PaperAirplaneIcon } from '@heroicons/react/24/outline';
import AdmimDashboardLayout from '../../../components/AdmimDashboardLayout';

interface AutoGeneratedEmail {
  id: string;
  reelId: string;
  caption?: string;
  mediaUrl?: string;
  permalink?: string;
  generatedEmail: {
    subject: string;
    html: string;
    plainText: string;
  };
  status: 'pending_review' | 'approved' | 'sent' | 'rejected';
  createdAt: string;
}

const AutoEmailsPage = () => {
  const [autoEmails, setAutoEmails] = useState<AutoGeneratedEmail[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedEmail, setSelectedEmail] = useState<AutoGeneratedEmail | null>(null);
  const [showPreview, setShowPreview] = useState(false);

  useEffect(() => {
    loadAutoEmails();
  }, []);

  const loadAutoEmails = async () => {
    try {
      setIsLoading(true);
      // Por ahora simulamos datos, después conectaremos con la base de datos
      const mockEmails: AutoGeneratedEmail[] = [
        {
          id: 'auto_1',
          reelId: '123456789',
          caption: 'La mayoría cree que para hacer un press necesitás fuerza de brazos...',
          permalink: 'https://www.instagram.com/p/example/',
          generatedEmail: {
            subject: 'Reflexiones desde el movimiento',
            html: '<p>Hola Mateo,</p><p>La mayoría cree que para hacer un press necesitás fuerza de brazos...</p>',
            plainText: 'Hola Mateo,\n\nLa mayoría cree que para hacer un press necesitás fuerza de brazos...'
          },
          status: 'pending_review',
          createdAt: new Date().toISOString()
        }
      ];
      
      setAutoEmails(mockEmails);
    } catch (error) {
      console.error('Error loading auto emails:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleApprove = async (emailId: string) => {
    try {
      // Aquí implementarías la lógica para aprobar el email
      setAutoEmails(prev => prev.map(email => 
        email.id === emailId ? { ...email, status: 'approved' as const } : email
      ));
      console.log('Email aprobado:', emailId);
    } catch (error) {
      console.error('Error approving email:', error);
    }
  };

  const handleReject = async (emailId: string) => {
    try {
      // Aquí implementarías la lógica para rechazar el email
      setAutoEmails(prev => prev.map(email => 
        email.id === emailId ? { ...email, status: 'rejected' as const } : email
      ));
      console.log('Email rechazado:', emailId);
    } catch (error) {
      console.error('Error rejecting email:', error);
    }
  };

  const handleSend = async (emailId: string) => {
    try {
      // Aquí implementarías la lógica para enviar el email
      setAutoEmails(prev => prev.map(email => 
        email.id === emailId ? { ...email, status: 'sent' as const } : email
      ));
      console.log('Email enviado:', emailId);
    } catch (error) {
      console.error('Error sending email:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending_review': return 'bg-yellow-100 text-yellow-800';
      case 'approved': return 'bg-green-100 text-green-800';
      case 'sent': return 'bg-blue-100 text-blue-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending_review': return 'Pendiente';
      case 'approved': return 'Aprobado';
      case 'sent': return 'Enviado';
      case 'rejected': return 'Rechazado';
      default: return 'Desconocido';
    }
  };

  return (
    <AdmimDashboardLayout>
      <div className="w-full">
        {/* Header */}
        <div className="mb-8 mt-8">
          <div className="flex items-center gap-4 mb-6">
            <Link 
              href="/admin/ai-management"
              className="p-2 bg-gray-800 rounded-lg shadow-lg border border-gray-700 hover:bg-gray-700 transition-colors"
            >
              <ArrowLeftIcon className="w-5 h-5 text-gray-300" />
            </Link>
            <div className="flex items-center gap-3">
              <div className="p-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl">
                <PaperAirplaneIcon className="w-8 h-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-white">Emails Automáticos</h1>
                <p className="text-gray-300 mt-1">
                  Gestiona emails generados automáticamente desde tus reels de Instagram
                </p>
              </div>
            </div>
          </div>

          {/* Breadcrumb */}
          <nav className="flex items-center space-x-2 text-sm text-gray-400 mb-6">
            <Link href="/admin" className="hover:text-gray-200">Admin</Link>
            <span>/</span>
            <Link href="/admin/ai-management" className="hover:text-gray-200">IA Management</Link>
            <span>/</span>
            <span className="text-white">Emails Automáticos</span>
          </nav>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-gray-800 rounded-lg p-4">
            <div className="text-2xl font-bold text-yellow-400">{autoEmails.filter(e => e.status === 'pending_review').length}</div>
            <div className="text-sm text-gray-400">Pendientes</div>
          </div>
          <div className="bg-gray-800 rounded-lg p-4">
            <div className="text-2xl font-bold text-green-400">{autoEmails.filter(e => e.status === 'approved').length}</div>
            <div className="text-sm text-gray-400">Aprobados</div>
          </div>
          <div className="bg-gray-800 rounded-lg p-4">
            <div className="text-2xl font-bold text-blue-400">{autoEmails.filter(e => e.status === 'sent').length}</div>
            <div className="text-sm text-gray-400">Enviados</div>
          </div>
          <div className="bg-gray-800 rounded-lg p-4">
            <div className="text-2xl font-bold text-red-400">{autoEmails.filter(e => e.status === 'rejected').length}</div>
            <div className="text-sm text-gray-400">Rechazados</div>
          </div>
        </div>

        {/* Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            {isLoading ? (
              <div className="bg-gray-800 rounded-lg p-8 text-center">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto mb-4"></div>
                <p className="text-gray-300">Cargando emails automáticos...</p>
              </div>
            ) : autoEmails.length === 0 ? (
              <div className="bg-gray-800 rounded-lg p-8 text-center">
                <PaperAirplaneIcon className="w-16 h-16 text-gray-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-white mb-2">No hay emails automáticos</h3>
                <p className="text-gray-400">Los emails generados automáticamente desde tus reels aparecerán aquí.</p>
              </div>
            ) : (
              <div className="space-y-4">
                {autoEmails.map((email) => (
                  <div key={email.id} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex-1">
                        <h3 className="text-lg font-semibold text-white mb-2">
                          {email.generatedEmail.subject}
                        </h3>
                        <p className="text-gray-300 text-sm mb-2">
                          Reel ID: {email.reelId}
                        </p>
                        <p className="text-gray-400 text-sm mb-3">
                          {email.caption?.substring(0, 100)}...
                        </p>
                        <div className="flex items-center gap-2">
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(email.status)}`}>
                            {getStatusText(email.status)}
                          </span>
                          <span className="text-xs text-gray-500">
                            {new Date(email.createdAt).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => {
                            setSelectedEmail(email);
                            setShowPreview(true);
                          }}
                          className="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                          title="Ver preview"
                        >
                          <EyeIcon className="w-4 h-4" />
                        </button>
                        
                        {email.status === 'pending_review' && (
                          <>
                            <button
                              onClick={() => handleApprove(email.id)}
                              className="p-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                              title="Aprobar"
                            >
                              <CheckIcon className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleReject(email.id)}
                              className="p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                              title="Rechazar"
                            >
                              <XMarkIcon className="w-4 h-4" />
                            </button>
                          </>
                        )}
                        
                        {email.status === 'approved' && (
                          <button
                            onClick={() => handleSend(email.id)}
                            className="p-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                            title="Enviar"
                          >
                            <PaperAirplaneIcon className="w-4 h-4" />
                          </button>
                        )}
                      </div>
                    </div>
                    
                    {email.permalink && (
                      <a
                        href={email.permalink}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-400 hover:text-blue-300 text-sm"
                      >
                        Ver reel en Instagram →
                      </a>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Info Card */}
            <div className="bg-gray-800 rounded-xl shadow-lg border border-gray-700 p-6">
              <h3 className="text-lg font-semibold text-white mb-4">¿Cómo funciona?</h3>
              <div className="space-y-3 text-sm text-gray-300">
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold mt-0.5">1</div>
                  <p>Subís un reel a Instagram</p>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold mt-0.5">2</div>
                  <p>El sistema detecta automáticamente el nuevo contenido</p>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold mt-0.5">3</div>
                  <p>IA genera un email en tu estilo</p>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-purple-600 rounded-full flex items-center justify-center text-white text-xs font-bold mt-0.5">4</div>
                  <p>Revisás, aprobás y enviás</p>
                </div>
              </div>
            </div>

            {/* Settings Card */}
            <div className="bg-gray-800 rounded-xl shadow-lg border border-gray-700 p-6">
              <h3 className="text-lg font-semibold text-white mb-4">Configuración</h3>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Webhook activo</span>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    Activo
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Notificaciones</span>
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    Activadas
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-300">Última verificación</span>
                  <span className="text-sm text-white">Hace 5 min</span>
                </div>
              </div>
              
              <div className="mt-4 pt-4 border-t border-gray-700">
                <button
                  onClick={async () => {
                    try {
                      const response = await fetch('/api/instagram/test-webhook');
                      const data = await response.json();
                      
                      if (data.success) {
                        alert('✅ Configuración correcta!\n\n' + data.nextSteps.join('\n'));
                      } else {
                        alert('❌ Error en la configuración:\n' + data.error);
                      }
                    } catch (error) {
                      alert('❌ Error probando webhook: ' + error);
                    }
                  }}
                  className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  🧪 Probar Configuración
                </button>
              </div>
            </div>

            {/* Help Card */}
            <div className="bg-gradient-to-r from-purple-900 to-pink-900 rounded-xl border border-purple-700 p-6">
              <h3 className="text-lg font-semibold text-purple-200 mb-3">¿Necesitas ayuda?</h3>
              <p className="text-sm text-purple-300 mb-4">
                Si tienes problemas con la automatización, revisa la configuración del webhook.
              </p>
              <button className="w-full px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                Ver Configuración
              </button>
            </div>
          </div>
        </div>

        {/* Email Preview Modal */}
        {showPreview && selectedEmail && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6 border-b border-gray-700">
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-semibold text-white">Preview del Email</h3>
                  <button
                    onClick={() => setShowPreview(false)}
                    className="text-gray-400 hover:text-white"
                  >
                    <XMarkIcon className="w-6 h-6" />
                  </button>
                </div>
              </div>
              
              <div className="p-6">
                <div className="bg-white text-gray-800 rounded-lg p-6">
                  <div 
                    className="email-preview"
                    dangerouslySetInnerHTML={{ __html: selectedEmail.generatedEmail.html }}
                  />
                </div>
                
                <div className="mt-6 flex gap-3">
                  <button
                    onClick={() => handleApprove(selectedEmail.id)}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    Aprobar
                  </button>
                  <button
                    onClick={() => handleReject(selectedEmail.id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                  >
                    Rechazar
                  </button>
                  <button
                    onClick={() => setShowPreview(false)}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                  >
                    Cerrar
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdmimDashboardLayout>
  );
};

export default AutoEmailsPage; 